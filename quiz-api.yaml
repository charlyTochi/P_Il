AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Quiz API'

Parameters:
  StageName:
    Type: String
    Default: prod
    Description: API Gateway stage name

Resources:
  # Lambda execution role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Lambda function
  QuizLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            const quizData = {
              "name": "Error Find",
              "heading": "This game teaches you to find mistakes in written text.",
              "activities": [
                {
                  "activity_name": "Activity One",
                  "order": 1,
                  "questions": [
                    {
                      "is_correct": false,
                      "stimulus": "I really enjoy *to play football* with friends.",
                      "order": 1,
                      "user_answers": [],
                      "feedback": "I really enjoy *playing football* with friends."
                    },
                    {
                      "is_correct": true,
                      "stimulus": "I think that *starting* a school science magazine is an excellent idea!",
                      "order": 2,
                      "user_answers": [],
                      "feedback": "I think that *starting* a school science magazine is an excellent idea!"
                    },
                    {
                      "is_correct": false,
                      "stimulus": "Watching films at home is *more cheaper* than at the cinema.",
                      "order": 3,
                      "user_answers": [],
                      "feedback": "Watching films at home is *cheaper* than at the cinema."
                    },
                    {
                      "is_correct": false,
                      "stimulus": "On the one hand, small cameras are comfortable. *In the other hand*, larger ones take better photos.",
                      "order": 4,
                      "user_answers": [],
                      "feedback": "On the one hand, small cameras are comfortable. *On the other hand*, larger ones take better photos."
                    },
                    {
                      "is_correct": false,
                      "stimulus": "My friend *like listening* to songs in English",
                      "order": 5,
                      "user_answers": [],
                      "feedback": "My friend *likes listening* to songs in English"
                    }
                  ]
                },
                {
                  "activity_name": "Activity Two",
                  "order": 2,
                  "questions": [
                    {
                      "round_title": "Round 1",
                      "order": 1,
                      "questions": [
                        {
                          "is_correct": false,
                          "stimulus": "Watching films at home is *more cheaper* than at the cinema.",
                          "order": 1,
                          "user_answers": [],
                          "feedback": "Watching films at home is *cheaper* than at the cinema."
                        },
                        {
                          "is_correct": false,
                          "stimulus": "On the one hand, small cameras are comfortable. *In the other hand*, larger ones take better photos.",
                          "order": 2,
                          "user_answers": [],
                          "feedback": "On the one hand, small cameras are comfortable. *On the other hand*, larger ones take better photos."
                        }
                      ]
                    },
                    {
                      "round_title": "Round 2",
                      "order": 2,
                      "questions": [
                        {
                          "is_correct": true,
                          "stimulus": "I can't go out because I *haven't finished* my homework yet.",
                          "order": 1,
                          "user_answers": [],
                          "feedback": "I can't go out because I *haven't finished* my homework yet."
                        },
                        {
                          "is_correct": false,
                          "stimulus": "My friend *like listening* to songs in English",
                          "order": 2,
                          "user_answers": [],
                          "feedback": "My friend *likes listening* to songs in English"
                        }
                      ]
                    }
                  ]
                }
              ]
            };
            
            return {
              statusCode: 200,
              headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET,OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              },
              body: JSON.stringify(quizData)
            };
          }
      Runtime: nodejs18.x
      MemorySize: 128
      Timeout: 3
      FunctionName: quiz-data-function

  # API Gateway REST API
  QuizApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: QuizAPI
      Description: API for serving quiz data
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource
  QuizResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref QuizApi
      ParentId: !GetAtt QuizApi.RootResourceId
      PathPart: quiz-data

  # OPTIONS Method for CORS
  QuizOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref QuizApi
      ResourceId: !Ref QuizResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # GET Method
  QuizMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref QuizApi
      ResourceId: !Ref QuizResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QuizLambdaFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - QuizMethod
      - QuizOptionsMethod
    Properties:
      RestApiId: !Ref QuizApi

  # API Gateway Stage
  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref QuizApi
      StageName: !Ref StageName

  # Lambda Permission for API Gateway
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt QuizLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${QuizApi}/*/*/*

Outputs:
  ApiURL:
    Description: URL of the API endpoint
    Value: !Sub https://${QuizApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/quiz-data